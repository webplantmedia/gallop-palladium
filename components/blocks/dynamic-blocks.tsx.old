import {
  getCoreImage,
  getGallopSinglePost,
  getGallopBlogPosts,
  getGallopInstagramPosts,
} from '@api';
import { getItem, getAttr, cleanHTML, grabMatch } from '../../lib/utils/tools';

async function fetchGallopBlogPostsData(block: any) {
  const permalink = getAttr('permalink', block);
  const data = await getGallopBlogPosts(permalink);
  const posts = data?.posts?.edges;
  block.attrs.posts = posts;

  return block;
}
async function fetchGallopInstagramPostsData(block: any) {
  const data = await getGallopInstagramPosts();
  const posts = data?.posts?.edges;
  block.attrs.posts = posts;

  return block;
}
async function fetchImageData(block: any) {
  const imageId = getAttr('id', block);
  const data = await getCoreImage(imageId);
  const mediaDetails = data?.mediaItem?.mediaDetails;
  if (mediaDetails) {
    if (!block.attrs?.width || !block.attrs?.height) {
      const sizes = data?.mediaItem?.mediaDetails?.sizes;
      if (sizes) {
        let s = {};
        s['full'] = { width: mediaDetails.width, height: mediaDetails.height };
        Object.keys(sizes).forEach(function (key) {
          s[sizes[key]['name']] = {
            width: sizes[key]['width'],
            height: sizes[key]['height'],
          };
        });
        if (block.attrs.sizeSlug && s[block.attrs.sizeSlug]) {
          block.attrs.width = s[block.attrs.sizeSlug].width;
          block.attrs.height = s[block.attrs.sizeSlug].height;
        } else {
          // if the default select image size is not one of the image sizes,
          // then select full size.
          block.attrs.width = s['full'].width;
          block.attrs.height = s['full'].height;
        }
      }
    }
  }

  block.attrs.width = Number(String(block.attrs.width).replace(/\D/g, ''));
  block.attrs.height = Number(String(block.attrs.height).replace(/\D/g, ''));

  return block;
}
async function fetchGallopSinglePostData(block: any) {
  const postId = getAttr('postId', block);
  const imageId = getAttr('id', block, 0);
  const postType = getAttr('postType', block);
  const data = await getGallopSinglePost(postId, imageId, postType);
  const post = data?.home;
  const mediaItem = data?.mediaItem;
  const content = getItem(post, 'content');
  const html = cleanHTML(block.innerHTML);
  const h4 = grabMatch(/<h4[^>]*>(.*?)<\/h4>/g, html);
  const button = grabMatch(/gallop-post-button[^>]*>(.*?)<\/[^>]*>/g, html);
  const title = h4 ? h4 : getItem(post, 'title');
  block.attrs.content = content;
  block.attrs.link = getItem(post, 'link');
  block.attrs.title = title;
  block.attrs.button = button;
  block.attrs.mediaItemAltText = getItem(mediaItem, 'altText');
  block.attrs.mediaItemTitle = getItem(mediaItem, 'title');
  block.attrs.mediaItemUrl = getItem(mediaItem, 'mediaItemUrl');
  if (!block.attrs.mediaItemUrl) {
    block.attrs.mediaItemUrl = getItem(
      post,
      'featuredImage',
      'node',
      'mediaItemUrl'
    );
    block.attrs.mediaItemAltText = getItem(
      post,
      'featuredImage',
      'node',
      'altText'
    );
    block.attrs.mediaItemTitle = getItem(
      post,
      'featuredImage',
      'node',
      'title'
    );
  }

  return block;
}

export async function fetchDynamicBlocks(content: any) {
  for (const key in content) {
    const block = content[key];
    switch (block.blockName) {
      case 'gallop/single-post':
        content[key] = await fetchGallopSinglePostData(block);
        break;
      case 'gallop/instagram-posts':
        content[key] = await fetchGallopInstagramPostsData(block);
        break;
      case 'gallop/blog-posts':
        content[key] = await fetchGallopBlogPostsData(block);
        break;
      // case 'core/image':
      // content[key] = await fetchImageData(block);
      // break;
      // case 'core/gallery':
      // content[key].innerBlocks = await fetchDynamicBlocks(block.innerBlocks);
      // break;
    }
  }

  return content;
}
